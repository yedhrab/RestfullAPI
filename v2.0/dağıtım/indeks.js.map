{"version":3,"sources":["../indeks.js"],"names":["httpSunucu","istek","yanıt","birleşikSunucu","httpsSunucuAyarları","key","cert","httpsSunucu","listen","httpBağlantıNoktası","console","log","httpsBağlantıNoktası","ayrıştırılmışUrl","url","sorguDizgisiObjeleri","query","yol","pathname","kırpılmışYol","replace","metot","method","toLowerCase","başlıklar","headers","kodÇözücü","dizgiÇözücü","tampon","on","write","veri","end","yükler","seçilmişİşleyici","durumKodu","yükDizgisi","JSON","stringify","setHeader","writeHead"],"mappings":";;8QAAA;;;;;;AAMA;;;;;;;;;;;;;AAWA;;AACA;;AACA;;AACA;;AACA;;AAIA;;AACA;;;;AACA;;AACA;;;;AAEA;AACA;;AAEA;;;;AAIA,IAAMA,aAAa,wBAAa,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAChDC,iBAAeF,KAAf,EAAsBC,KAAtB;AACD,CAFkB,CAAnB;;AAIA;;;;AAIA,IAAME,sBAAsB;AAC1B;AACAC,OAAK,sBAAa,iBAAb,CAFqB;AAG1BC,QAAM,sBAAa,kBAAb;AAHoB,CAA5B;;AAMA;;;;AAIA,IAAMC,cAAc,yBAAcH,mBAAd,EAAmC,UAACH,KAAD,EAAQC,KAAR,EAAkB;AACvEC,iBAAeF,KAAf,EAAsBC,KAAtB;AACD,CAFmB,CAApB;;AAIA;;;;;AAKAF,WAAWQ,MAAX,CAAkBC,+BAAlB,EAAuC,YAAM;AAC3CC,UAAQC,GAAR,aAAsBF,+BAAtB;AACD,CAFD;;AAIA;;;;;AAKAF,YAAYC,MAAZ,CAAmBI,gCAAnB,EAAyC,YAAM;AAC7CF,UAAQC,GAAR,wBAA8BC,gCAA9B;AACD,CAFD;;AAIA;;;;;AAKA,IAAMT,iBAAiB,SAAjBA,cAAiB,CAACF,KAAD,EAAQC,KAAR,EAAkB;AACvC;;;;AAIA,MAAMW,mBAAmB,gBAAMZ,MAAMa,GAAZ,EAAiB,IAAjB,CAAzB;;AAEA;;;;;AAKA,MAAMC,uBAAuBF,iBAAiBG,KAA9C;;AAEA;;;;;;AAMA,MAAMC,MAAMJ,iBAAiBK,QAA7B;;AAEA;;;;;AAKA,MAAMC,eAAeF,IAAIG,OAAJ,CAAY,WAAZ,EAAyB,EAAzB,CAArB;;AAEA;;;;AAIA,MAAMC,QAAQpB,MAAMqB,MAAN,CAAaC,WAAb,EAAd;;AAEA;;;;;AAKA,MAAMC,YAAYvB,MAAMwB,OAAxB;;AAEA;;;;AAIA,MAAMC,YAAY,IAAIC,6BAAJ,CAAgB,OAAhB,CAAlB;AACA,MAAIC,SAAS,EAAb;;AAEA;;;;AAIA3B,QAAM4B,EAAN,CAAS,MAAT,EAAiB,gBAAQ;AACvB;;;;AAIAD,cAAUF,UAAUI,KAAV,CAAgBC,IAAhB,CAAV;AACD,GAND;;AAQA9B,QAAM4B,EAAN,CAAS,KAAT,EAAgB,YAAM;AACpB;;;;AAIAD,cAAUF,UAAUM,GAAV,EAAV;;AAEA;;;;;;AAMA,QAAMD,OAAO;AACXZ,oBAAcA,YADH;AAEXJ,4BAAsBA,oBAFX;AAGXM,aAAOA,KAHI;AAIXG,iBAAWA,SAJA;AAKXS,cAAQ,oCAAoBL,MAApB;AALG,KAAb;;AAQA;AACA,qCAAeT,YAAf,EAA6B,4BAAoB;AAC/Ce,uBAAiBH,IAAjB,EAAuB,UAACI,SAAD,EAAYF,MAAZ,EAAuB;AAC5C;AACAE,oBAAY,OAAOA,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4C,GAAxD;;AAEA;AACAF,iBAAS,QAAOA,MAAP,yCAAOA,MAAP,OAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,EAA/C;;AAEA;AACA,YAAMG,aAAaC,KAAKC,SAAL,CAAeL,MAAf,CAAnB;;AAEA;AACA/B,cAAMqC,SAAN,CAAgB,cAAhB,EAAgC,kBAAhC;;AAEA;AACArC,cAAMsC,SAAN,CAAgBL,SAAhB;AACAjC,cAAM8B,GAAN,CAAUI,UAAV;;AAEA;AACA1B,gBAAQC,GAAR,CAAY,SAAZ,EAAuBwB,SAAvB,EAAkCC,UAAlC;AACD,OAnBD;AAoBD,KArBD;AAsBD,GA5CD;AA6CD,CA1GD","file":"indeks.js","sourcesContent":["/**\n * API için öncelikli dosya\n * @description ES5 tabanında yazılmış bir API\n * @author YunusEmre\n */\n\n/**\n * Bağımlılıklar\n * * http ve https; Sunucu oluşturmak için gereklidir.\n * * url; Sunucunun url'i için gereklidir.\n * * dizgiÇözücü; ASCI kodlarını çözümlemek için gereklidir.\n * * yapılandırma; Yapılandırma için gerekli olan, ortam değişkenlerini içerir. [ config.js dosyasındaki ]\n * * ds; FS, yani file system, dosya işlemleri için gereklidir.\n * * testler; Dosya işlemlerini test etmek için gereklidir.\n * * işleyiciler; Yönlendirici için gereklidir.\n * * yardımcılar; Şifreleme işlembi gibi işlemlerde gereklidir.\n */\nimport { createServer } from \"http\";\nimport { createServer as _createServer } from \"https\";\nimport { parse } from \"url\";\nimport { StringDecoder as dizgiÇözücü } from \"string_decoder\";\nimport {\n  httpBağlantıNoktası,\n  httpsBağlantıNoktası\n} from \"./kütüphane/yapılandırma\";\nimport { readFileSync } from \"fs\";\nimport testler from \"./kütüphane/test\";\nimport { jsonuObjeyeDönüştür } from \"./kütüphane/yardımcılar\";\nimport { işleyiciAyarla } from \"./kütüphane/yönlendirici\";\n\n// testler.hepsiniTestEt();\n// testler.SMSTesti();\n\n/**\n * HTTP sunucusu oluşturma\n * Not: Sunucu her isteğe string ile karşılık vermeli\n */\nconst httpSunucu = createServer((istek, yanıt) => {\n  birleşikSunucu(istek, yanıt);\n});\n\n/**\n * Güvenli sunucu için oluşturulan OpenSSL verilerini tanımlıyoruz.\n * Not: Dosyaların önceden OpenSSl ile oluşturulmuş olması lazım.\n */\nconst httpsSunucuAyarları = {\n  // Dosya okuma [ readFileSync ]\n  key: readFileSync(\"./https/key.pem\"),\n  cert: readFileSync(\"./https/cert.pem\")\n};\n\n/**\n * HTTPS sunucusu oluşturma\n * Not: Sunucu her isteğe string ile karşılık vermeli\n */\nconst httpsSunucu = _createServer(httpsSunucuAyarları, (istek, yanıt) => {\n  birleşikSunucu(istek, yanıt);\n});\n\n/**\n * Sunucuyu (HTTP) yapılamdırma dosyasındaki bağlantı noktasından dinliyoruz.\n * Örnek kullanım: curl localhost:3000\n * Not: Eğer 3000 yerine 500 yazsaydık, localhost:500 yapacaktık.\n */\nhttpSunucu.listen(httpBağlantıNoktası, () => {\n  console.log(`Sunucu ${httpBağlantıNoktası} portundan dinleniyor.`);\n});\n\n/**\n * Sunucuyu (HTTPS) yapılamdırma dosyasındaki bağlantı noktasından dinliyoruz.\n * Örnek kullanım: curl localhost:3000\n * Not: Eğer 3000 yerine 500 yazsaydık, locakhost:500 yapacaktık.\n */\nhttpsSunucu.listen(httpsBağlantıNoktası, () => {\n  console.log(`Güvenli Sunucu ${httpsBağlantıNoktası} portundan dinleniyor.`);\n});\n\n/**\n * HTTP ve HTTPS için ortak işlemlerin olduğu metot\n * @param {string} istek Sunucuya verilen istek\n * @param {string} yanıt Sunucunun verdiği yanıt\n */\nconst birleşikSunucu = (istek, yanıt) => {\n  /**\n   * Url ayrıştırma işlemi\n   * * Örnek: *{... query: {}, pathname: \"/ornek\" ... } şeklinde bir url classı*\n   */\n  const ayrıştırılmışUrl = parse(istek.url, true);\n\n  /**\n   * Sorgu kelimesini (query string) obje olarak almak.\n   * * Örnek: *\"curl localhost:3000/foo?test=testtir\" ise { test : \"testtir\" }*\n   * * Not: *\"?test=testtir\" sorgu dizgisidir.*\n   */\n  const sorguDizgisiObjeleri = ayrıştırılmışUrl.query;\n\n  /**\n   * Ayrıştırılan urldeki pathname değişkenindeki değeri yol\"a alıyorz.\n   *\n   * * Örnek: *\"curl localhost:3000/ornek/test/\" => yolu \"/ornek/test/\"*\n   * * Not: *sorgu dizgileri ele alınmaz ( \"curl localhost:3000/ornek?foo=bar\" => yolu \"/ornek\" )*\n   */\n  const yol = ayrıştırılmışUrl.pathname;\n\n  /**\n   * Replace içinde verilen işaretler çıkartılarak alınan yol.\n   * * Örnek: *[\"/ornek\" -> \"ornek\"] veya [\"/ornek/test/\" -> \"ornek/test/\"] olarak kırpılmakta.*\n   * * Not: *Sadece ilk karakter kırpılıyor (?)*\n   */\n  const kırpılmışYol = yol.replace(/^\\/+|\\+$/g, \"\");\n\n  /**\n   * HTTP metodu alma\n   * * Örnek: *GET, POST, PUT, DELETE ...*\n   */\n  const metot = istek.method.toLowerCase();\n\n  /**\n   * İsteğin içindeki başlıkları (header keys) obje olarak almak.\n   * * Not: *Postman ile headers sekmesinde gönderilen anahtarları (keys)\n   * ve değerlerini (the value of them) içerir.*\n   */\n  const başlıklar = istek.headers;\n\n  /**\n   * ASCI kodlarını çözümlemek için kod çözücü tanımlama\n   * * Not: *\"utf-8\" çözümleme yöntemidir*\n   */\n  const kodÇözücü = new dizgiÇözücü(\"utf-8\");\n  let tampon = \"\";\n\n  /**\n   * İstek ile data geldiği zaman çalışan metot\n   * @param data ASCI kodları\n   */\n  istek.on(\"data\", veri => {\n    /**\n     * ASCI kodlarını \"utf-8\" formatında çözümlüyoruz.\n     * * Ornek: *42 75 -> Bu [ 42 = B, 75 = u]*\n     */\n    tampon += kodÇözücü.write(veri);\n  });\n\n  istek.on(\"end\", () => {\n    /**\n     * Son kısmı ekliyoruz.\n     * Not: *Şu anlık \"\" (?)*s\n     */\n    tampon += kodÇözücü.end();\n\n    /**\n     * İşleyiciye gönderilen veri objesi oluşturma\n     * * Not: *Her dosyada kullanılan veri objesidir.*\n     * * Örnek: *{ \"kırpılmışYol\" = \"ornek\", \"sorguDizgisiObjeleri\" = {}, \"metot\" = \"post\",\n     *   \"yükler\" = {\"isim\" : \"Yunus Emre\"} [Body içindeki metinler] vs.}*\n     */\n    const veri = {\n      kırpılmışYol: kırpılmışYol,\n      sorguDizgisiObjeleri: sorguDizgisiObjeleri,\n      metot: metot,\n      başlıklar: başlıklar,\n      yükler: jsonuObjeyeDönüştür(tampon)\n    };\n\n    // İşleyiciyi ayarlıyoruz.\n    işleyiciAyarla(kırpılmışYol, seçilmişİşleyici => {\n      seçilmişİşleyici(veri, (durumKodu, yükler) => {\n        // Durum kodunu kullan veya varsayılanı ele al\n        durumKodu = typeof durumKodu === \"number\" ? durumKodu : 200;\n\n        // Yükleri kullan yada varsayılanı ele al\n        yükler = typeof yükler === \"object\" ? yükler : {};\n\n        // Yükleri dizgi\"ye çevirme\n        const yükDizgisi = JSON.stringify(yükler);\n\n        // Döndürülen sonucun içeriğinin JSON olduğunu belirliyoruz.\n        yanıt.setHeader(\"Content-type\", \"application/json\");\n\n        // Sonucu döndürme\n        yanıt.writeHead(durumKodu);\n        yanıt.end(yükDizgisi);\n\n        // Sonucu konsola yazma\n        console.log(\"Yanıt: \", durumKodu, yükDizgisi);\n      });\n    });\n  });\n};\n"]}