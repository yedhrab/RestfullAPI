{"version":3,"sources":["..\\kütüphane\\işleyiciler\\belirteçler.js"],"names":["belirteçler","veri","geriCagirma","uygunMetotlar","indexOf","metot","metotlar","bilgi","belirteçOnaylama","belirtec","telefonNo","hata","belirteçVerisi","ömür","Date","now","post","yükler","trim","length","şifre","kullanıcıVerisi","gizlenmişŞifre","belirteçKimliği","kimlikUzunluğu","belirteçObjesi","kimlik","get","sorguDizgisiObjeleri","put","süreUzatma","delete"],"mappings":"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","file":"belirteçler.js","sourcesContent":["/**\n * Kullanıcı sisteme giriş yaptığı zaman, oluşturulur. Kullanıcının giriş yapmış olduğunu ispatlar.\n * @author Yunus Emre\n */\n\nimport { oku, oluştur, güncelle, sil } from \"../veri\";\nimport { şifreleme, rastgeleDizgiOluştur } from \"./../yardımcılar\";\nimport { kimlikUzunluğu } from \"./../yapılandırma\";\n\n/**\n * İşleyiciyi belirteçler\n *\n * * Örnek: *localhost:3000/belirteçler yazıldığında bu fonksiyon çalışır. (yönlendirici ile, index.js)*\n *\n * @param {object} veri Index.js\"te tanımlanan veri objesidir. İstekle gelir.\n * @param {function(number, object):void} geriCagirma İşlemler bittiği zaman verilen yanıt\n ** arg0: HTTP varsayılan durum kodları\n ** arg1: Ek bilgiler, açıklamalar\n */\nconst belirteçler = (veri, geriCagirma) => {\n  var uygunMetotlar = [\"post\", \"get\", \"put\", \"delete\"];\n\n  if (uygunMetotlar.indexOf(veri.metot) > -1) {\n    metotlar[veri.metot](veri, geriCagirma);\n  } else {\n    geriCagirma(405, { bilgi: \"Simgle işlemi için uygun metot bulunamadı :(\" });\n  }\n};\n\n/**\n * Belirteçleri onaylamak için kullanılan metot.\n * @param {string} belirtec Okunacak (aranacak) belirteç\n * @param {string} telefonNo Kullanıcı telefonNo numarası\n * @param {function(boolean):void} geriCagirma İşlemler bittiği zaman verilen yanıt\n ** arg0: Belirtecin onaylanma durumu\n */\nbelirteçler.belirteçOnaylama = (belirtec, telefonNo, geriCagirma) => {\n  oku(\"belirteçler\", belirtec, (hata, belirteçVerisi) => {\n    if (!hata && belirteçVerisi) {\n      // Telefon no, kimlik niyetine kullanıldığı için telefon no'ları karşılaştırıyoruz.\n      if (\n        belirteçVerisi.telefonNo == telefonNo &&\n        belirteçVerisi.ömür > Date.now()\n      ) {\n        geriCagirma(true);\n      } else {\n        geriCagirma(false);\n      }\n    } else {\n      geriCagirma(false);\n    }\n  });\n};\n\n// Belirteçler işleyicisinin alt metotları için kalıp\nconst metotlar = {};\n\n/**\n * Belirteç oluşturma metodu\n * * Gerekli veriler: *Telefon No, Şifre*\n * * Kullanım şekli: *Yükler ile kullanılır (Body içindeki JSON verileri) (localhost:3000/belitecler)*\n * @param {object} veri Index.js\"te tanımlanan veri objesi. İstekle gelir.\n * @param {function(number, object):void} geriCagirma İşlemler bittiği zaman verilen yanıt\n ** arg0: HTTP varsayılan durum kodları\n ** arg1: Ek bilgiler, açıklamalar\n */\nmetotlar.post = (veri, geriCagirma) => {\n  // Gerekli veriler\n  var telefonNo =\n    typeof veri.yükler.telefonNo == \"string\" &&\n    veri.yükler.telefonNo.trim().length == 10\n      ? veri.yükler.telefonNo.trim()\n      : false;\n\n  var şifre =\n    typeof veri.yükler.şifre == \"string\" && veri.yükler.şifre.trim().length > 0\n      ? veri.yükler.şifre.trim()\n      : false;\n\n  if (telefonNo && şifre) {\n    oku(\"kullanıcılar\", telefonNo, (hata, kullanıcıVerisi) => {\n      if (!hata && kullanıcıVerisi) {\n        // Alınan şifreyi gizlenmiş şifre ile karşılaştırmamız lazım.\n        var gizlenmişŞifre = şifreleme(şifre);\n\n        if (gizlenmişŞifre == kullanıcıVerisi.gizlenmişŞifre) {\n          var belirteçKimliği = rastgeleDizgiOluştur(kimlikUzunluğu);\n          var ömür = Date.now() + 1000 * 60 * 60;\n\n          /**\n           * Kullanıcının siteme giriş yapmış olduğunu kontrol etmek için kullanılır.\n           * * Not: *Kimlik (belirtecKimligi) türkçe karakter içeremez, çünkü adres çubuğundan değer ile çağırılmaktadır. (Sorgu verisi)*\n           * @property ömür Kullanıcının giriş yaptıktan sonra, en fazla giriş yapmış halde kalma süresi\n           */\n          var belirteçObjesi = {\n            telefonNo: telefonNo,\n            kimlik: belirteçKimliği,\n            ömür: ömür\n          };\n\n          oluştur(\"belirteçler\", belirteçKimliği, belirteçObjesi, hata => {\n            if (!hata) {\n              geriCagirma(200, belirteçObjesi);\n            } else {\n              geriCagirma(500, { bilgi: \"Belirteç oluşturulamadı :(\" });\n            }\n          });\n        } else {\n          geriCagirma(400, {\n            bilgi:\n              \"Belirteç oluşturmak için girilen şifre kullanıcı ile uyuşmamakta\"\n          });\n        }\n      } else {\n        geriCagirma(400, {\n          bilgi: \"Belirteç oluşturmak için aranan kullanıcı bulunamadı :(\"\n        });\n      }\n    });\n  } else {\n    geriCagirma(400, {\n      bilgi: \"Belirteç oluşturmak için gerekli alanlar doldurulmadı :(\"\n    });\n  }\n};\n\n/**\n * Belirteç alma metodu\n * * Gerekli veriler: *Kimlik*\n * * Kullanım Şekli: *localhost:3000/belirteçler?kimlik=... (Sorgu verisi)*\n * @param {object} veri Index.js\"te tanımlanan veri objesi. İstekle gelir.\n * @param {function(number, object):void} geriCagirma İşlemler bittiği zaman verilen yanıt\n ** arg0: HTTP varsayılan durum kodları\n ** arg1: Ek bilgiler, açıklamalar\n */\nmetotlar.get = (veri, geriCagirma) => {\n  // Rastgele dizgi oluştur metodundaki değere eşit olmak zorunda, o sebeple yapılandırma.kimlikUzunluğu\n  var kimlik =\n    typeof veri.sorguDizgisiObjeleri.kimlik == \"string\" &&\n    veri.sorguDizgisiObjeleri.kimlik.trim().length == kimlikUzunluğu\n      ? veri.sorguDizgisiObjeleri.kimlik.trim()\n      : false;\n\n  if (kimlik) {\n    oku(\"belirteçler\", kimlik, (hata, belirteçVerisi) => {\n      if (!hata) {\n        geriCagirma(200, belirteçVerisi);\n      } else {\n        geriCagirma(404, { bilgi: \"Alınacak belirteç bulunamadı :(\" });\n      }\n    });\n  } else {\n    geriCagirma(400, {\n      bilgi: \"Belirteç alma işlemi için gereken alanlar eksik :(\"\n    });\n  }\n};\n\n/**\n * Belirteç güncelleme metodu\n * * Gerekli Veriler: *Kimlik, Süre Uzatma*\n * * Kullanım şekli: *Yükler ile kullanılır (Body içindeki JSON verileri) (localhost:3000/belirtecler)*\n * @param {object} veri Index.js\"te tanımlanan veri objesi. İstekle gelir.\n * @param {function(number, object):void} geriCagirma İşlemler bittiği zaman verilen yanıt\n ** arg0: HTTP varsayılan durum kodları\n ** arg1: Ek bilgiler, açıklamalar\n */\nmetotlar.put = (veri, geriCagirma) => {\n  // İndex'te rastgele dizgi oluşturma uzunluğu ile aynı olmak zorunda (yapılandırma.kimlikUzunluğu)\n  var kimlik =\n    typeof veri.yükler.kimlik == \"string\" &&\n    veri.yükler.kimlik.trim().length == kimlikUzunluğu\n      ? veri.yükler.kimlik.trim()\n      : false;\n\n  var süreUzatma =\n    typeof veri.yükler.süreUzatma == \"boolean\" && veri.yükler.süreUzatma;\n\n  if (kimlik && süreUzatma) {\n    oku(\"belirteçler\", kimlik, (hata, belirteçVerisi) => {\n      if (!hata) {\n        if (belirteçVerisi.ömür > Date.now()) {\n          belirteçVerisi.ömür = Date.now() + 1000 * 60 * 60;\n\n          güncelle(\"belirteçler\", kimlik, belirteçVerisi, hata => {\n            if (!hata) {\n              geriCagirma(200, { bilgi: \"Belirteç ömrü uzatıldı :)\" });\n            } else {\n              geriCagirma(500, { bilgi: \"Belirteç verisi güncellenemedi :(\" });\n            }\n          });\n        } else {\n          geriCagirma(400, {\n            bilgi: \"Ömrü uzatılmak istenen belirteç çoktan ölmüştür :(\"\n          });\n        }\n      } else {\n        geriCagirma(400, {\n          bilgi: \"Belirteç güncelleme işlemi için aranan belirteç bulunamadı :(\"\n        });\n      }\n    });\n  } else {\n    geriCagirma(400, {\n      bilgi: \"Belirteç güncelleme işlemi için gerekli alan(lar) eksik :(\"\n    });\n  }\n};\n\n/**\n * Belirteç silme metodu\n * * Gerekli Veriler: *Kimlik*\n * * Kullanım Şekli: *localhost:3000/belirteçler?kimlik=... (Sorgu verisi)*\n * @param {object} veri Index.js\"te tanımlanan veri objesi. İstekle gelir.\n * @param {function(number, object):void} geriCagirma İşlemler bittiği zaman verilen yanıt\n ** arg0: HTTP varsayılan durum kodları\n ** arg1: Ek bilgiler, açıklamalar\n */\nmetotlar.delete = (veri, geriCagirma) => {\n  var kimlik =\n    typeof veri.sorguDizgisiObjeleri.kimlik == \"string\" &&\n    veri.sorguDizgisiObjeleri.kimlik.trim().length == kimlikUzunluğu\n      ? veri.sorguDizgisiObjeleri.kimlik.trim()\n      : false;\n\n  if (kimlik) {\n    oku(\"belirteçler\", kimlik, hata => {\n      if (!hata) {\n        sil(\"belirteçler\", kimlik, hata => {\n          if (!hata) {\n            geriCagirma(200, { bilgi: \"Belirteç başarıyla silindi :)\" });\n          } else {\n            geriCagirma(500, {\n              bilgi: \"Belirteç silme işlemi başarısız oldu :(\"\n            });\n          }\n        });\n      } else {\n        geriCagirma(400, { bilgi: \"Silenecek belirteç bulunamadı :(\" });\n      }\n    });\n  } else {\n    geriCagirma(400, {\n      bilgi: \"Belirteç silmek için gereken alanlar eksin :(\"\n    });\n  }\n};\n\nexport default belirteçler;\n"]}