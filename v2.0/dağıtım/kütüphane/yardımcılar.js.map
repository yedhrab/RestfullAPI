{"version":3,"sources":["..\\..\\kütüphane\\yardımcılar.js"],"names":["şifreleme","jsonuObjeyeDönüştür","rastgeleDizgiOluştur","twilioSMSGönder","dizgi","length","şifrelemeGizliliği","update","digest","obje","JSON","parse","e","dizgiUzunlugu","olasıKarakterler","i","rastgeleKarakter","charAt","Math","floor","random","telefonNo","mesaj","geriCagirma","trim","yükler","From","twilio","telefon","To","Body","yükDizgisi","istekDetayları","protocol","host","method","path","accountSid","auth","authToken","headers","Buffer","byteLength","istek","durumKodu","statusCode","on","hata","write","end"],"mappings":"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","file":"yardımcılar.js","sourcesContent":["/**\n * Yardımcı metotlar\n * Açıklama: Şifreleme gibi yardımcı metodlar bulunur\n */\n\n/**\n * Bağımlılıklar\n * * kripto; *Şifreleme metodları için*\n * * yapılandırma; *Ana program yapılandırma dosyası (şifreleme için)*\n */\nimport { createHash } from \"crypto\";\nimport { şifrelemeGizliliği, twilio } from \"./yapılandırma\";\nimport { stringify } from \"querystring\";\nimport { request } from \"https\";\n\n/**\n * Şifreleme metodu\n * @param {string} dizgi Şifrelenecek dizgi\n */\nexport function şifreleme(dizgi) {\n  if (typeof dizgi === \"string\" && dizgi.length > 0) {\n    return createHash(\"sha256\", şifrelemeGizliliği)\n      .update(dizgi)\n      .digest(\"hex\");\n  } else {\n    return false;\n  }\n}\n\n/**\n * Json'u objeye dönüştürme (parsing)\n * @param {string} dizgi Dönüştürülecek json\n * @return {object} JSON objesi\n */\nexport function jsonuObjeyeDönüştür(dizgi) {\n  try {\n    var obje = JSON.parse(dizgi);\n    return obje;\n  } catch (e) {\n    return {};\n  }\n}\n\n/**\n * Rastgele bir dizgi oluşturma\n * @param {number} dizgiUzunlugu Oluşturulacak rastgele dizginin uzunluğu\n */\nexport function rastgeleDizgiOluştur(dizgiUzunlugu) {\n  dizgiUzunlugu =\n    typeof dizgiUzunlugu == \"number\" && dizgiUzunlugu > 0\n      ? dizgiUzunlugu\n      : false;\n\n  if (dizgiUzunlugu) {\n    // Türkçe karakter içeremez, adres çubuğuna yazılmaktadır.\n    const olasıKarakterler = \"abcdefghijklmnoprstuvwxyz0123456789\";\n    let dizgi = \"\";\n\n    for (let i = 1; i <= dizgiUzunlugu; i++) {\n      let rastgeleKarakter = olasıKarakterler.charAt(\n        Math.floor(Math.random() * olasıKarakterler.length)\n      );\n      dizgi += rastgeleKarakter;\n    }\n    return dizgi;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Twilio API üzerinden SMS gönderme\n * @param {number} telefonNo SMS gönderilecek telefon no\n * @param {string} mesaj Göderilecek SMS'in metni (içeriği)\n * @param {function(boolean | object):void} geriCagirma İşlem sırasında hata meydana gelirse true\n * * arg0: HTTP varsayılan durum kodları | Hata durumunda açıklamalar\n */\nexport function twilioSMSGönder(telefonNo, mesaj, geriCagirma) {\n  // Parametreleri kontrol ediyoruz.\n  telefonNo =\n    typeof telefonNo == \"string\" && telefonNo.trim().length == 10\n      ? telefonNo\n      : false;\n\n  mesaj =\n    typeof mesaj == \"string\" &&\n    mesaj.trim().length > 0 &&\n    mesaj.trim().length < 1600\n      ? mesaj\n      : false;\n\n  if (telefonNo && mesaj) {\n    // Yük bilgilerini yapılandırma (Türkçeleştirilemez, kaşrı sunucuya gönderilecektir.)\n    const yükler = {\n      From: twilio.telefon,\n      To: \"+90\" + telefonNo,\n      Body: mesaj\n    };\n    // Objeyi stringe çeviriyoruz\n    const yükDizgisi = stringify(yükler);\n\n    const istekDetayları = {\n      protocol: \"https:\",\n      host: \"api.twilio.com\",\n      method: \"post\",\n      path: \"/2010-04-01/Accounts/\" + twilio.accountSid + \"/Messages.json\",\n      auth: twilio.accountSid + \":\" + twilio.authToken,\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Content-Length\": Buffer.byteLength(yükDizgisi)\n      }\n    };\n\n    // İsteği örneklendiriyoruz\n    const istek = request(istekDetayları, istek => {\n      // Durum kodunu alıyoruz\n      const durumKodu = istek.statusCode;\n      // Eğer işlemler düzgün çalıştıysa geri bildirim veriyoruz\n      if (durumKodu != 200 && durumKodu != 201) {\n        geriCagirma(\"Durum kodu: \" + durumKodu);\n      } else {\n        geriCagirma(false);\n      }\n    });\n\n    // Hata durumunda isteği kesiyoruz ki hata fırlatmasın (thrown)\n    istek.on(\"error\", hata => {\n      geriCagirma(hata);\n    });\n\n    // Yükleri yazıyoruz\n    istek.write(yükDizgisi);\n\n    // İsteği kapatıyoruz\n    istek.end();\n  } else {\n    geriCagirma(\"Verilen bilgiler eksik veya kullanışsız :(\");\n  }\n}\n"]}