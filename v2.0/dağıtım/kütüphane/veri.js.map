{"version":3,"sources":["..\\..\\kütüphane\\veri.js"],"names":["oluştur","oku","güncelle","sil","anaDizin","__dirname","dizin","dosya","veri","geriCagirma","hata","dosyaTanımlayıcı","dizgiVerisi","JSON","stringify","bilgi","veriObjesi","veriDizgisi"],"mappings":"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","file":"veri.js","sourcesContent":["/**\n * Kütüphane\n * Açıklama: Verileri inceleme ve düzenlemek için dosya\n */\n\n/**\n * Bağımlılıklar\n * -> ds; Dosya işlemleri için gerekli [ fs = file system ]\n * -> yol; Dosyaların yollarını bulmak için gerekli\n */\nimport { open, writeFile, close, readFile, ftruncate, unlink } from \"fs\";\nimport { join } from \"path\";\nimport { jsonuObjeyeDönüştür } from \"./yardımcılar\";\n\n/**\n * Ana dosya yollarını tanımlama\n * * *__dirname* evrensel objedir (global object) değiştirilemez (türkçeleştirilemez)\n * * *__dirname* Bulunduğum dizini verir.\n */\nexport const anaDizin = join(__dirname, \"/../.veri/\");\n\n/**\n * Veri oluşturma\n * @param {string} dizin Dosyanın oluşturulacağı dizin / klasör ismi\n * @param {string} dosya Verilerin içinde bulunacağı dosya'nın ismi *(kimlik)*\n * @param {object} veri Dosyaya kayıt edilecek veri\n * @param {function} geriCagirma - *(hata, yükler)* İşlemler yapıldıktan sonra verilen yanıt\n */\nexport function oluştur(dizin, dosya, veri, geriCagirma) {\n  // Dosyayı yazmak için açma\n  open(`${anaDizin}${dizin}/${dosya}.json`, \"wx\", (hata, dosyaTanımlayıcı) => {\n    if (!hata && dosyaTanımlayıcı) {\n      // Veriyi dizgiye çeviriyoruz.\n      const dizgiVerisi = JSON.stringify(veri);\n\n      writeFile(dosyaTanımlayıcı, dizgiVerisi, hata => {\n        if (!hata) {\n          close(dosyaTanımlayıcı, hata => {\n            if (!hata) {\n              geriCagirma(false, {\n                bilgi: \"Dosya oluşturma işleminde hata yok :)\"\n              });\n            } else {\n              geriCagirma(\"Dosyayı kapatırken hata meydana geldi :(\");\n            }\n          });\n        } else {\n          geriCagirma(\"Dosyaya yazarken hata meydana geldi :(\");\n        }\n      });\n    } else {\n      geriCagirma(\"Dosya oluşturulamadı, zaten oluşturulmuş olabilir ;)\");\n    }\n  });\n}\n\n/**\n * Veri okuma\n * @param {string} dizin Dosyanın oluşturulacağı dizin / klasör ismi\n * @param {string} dosya Verilerin içinde bulunacağı dosya'nın ismi *(kimlik)*\n * @param {function} geriCagirma- *(hata, veriObjesi)* İşlemler yapıldıktan sonra verilen yanıt\n */\nexport function oku(dizin, dosya, geriCagirma) {\n  readFile(`${anaDizin}${dizin}/${dosya}.json`, \"utf8\", (hata, veri) => {\n    if (!hata && veri) {\n      // Eğer hata yoksa obje olarak döndürüyoruz. (string değil) [ileride delete ile silme yapabilmek için]\n      const veriObjesi = jsonuObjeyeDönüştür(veri);\n      geriCagirma(hata, veriObjesi);\n    } else {\n      geriCagirma(hata, veri);\n    }\n  });\n}\n\n/**\n * Verileri güncelleme metodu\n *\n * @param {string} dizin Dosyanın oluşturulacağı dizin / klasör ismi\n * @param {string} dosya Verilerin içinde bulunacağı dosya'nın ismi *(kimlik)*\n * @param {object} veri Dosyaya kayıt edilecek veri\n * @param {function} geriCagirma - *(hata, yükler)* İşlemler yapıldıktan sonra verilen yanıt\n */\nexport function güncelle(dizin, dosya, veri, geriCagirma) {\n  open(`${anaDizin}${dizin}/${dosya}.json`, \"r+\", (hata, dosyaTanımlayıcı) => {\n    if (!hata && dosyaTanımlayıcı) {\n      const veriDizgisi = JSON.stringify(veri);\n\n      // Dosyayı kırpmak\n      ftruncate(dosyaTanımlayıcı, hata => {\n        if (!hata) {\n          // Dosyaya yazma ve sonrasında kapatma\n          writeFile(dosyaTanımlayıcı, veriDizgisi, hata => {\n            if (!hata) {\n              close(dosyaTanımlayıcı, hata => {\n                if (!hata) {\n                  geriCagirma(false, {\n                    bilgi: \"Dosya güncelleme işleminde hata yok :)\"\n                  });\n                } else {\n                  geriCagirma(\"Dosyayı kapatırken hata oluştu :(\");\n                }\n              });\n            } else {\n              geriCagirma(\"Var olan dosyaya yazmada hata oluştu :(\");\n            }\n          });\n        } else {\n          geriCagirma(\"Dosyayı kırpmada hata oluştu :(\");\n        }\n      });\n    } else {\n      geriCagirma(\"Güncellenecek dosya bulunamadı :(\");\n    }\n  });\n}\n\n/**\n * Dosyayı silmek\n *\n * @param {string} dizin Dosyanın oluşturulacağı dizin / klasör ismi\n * @param {string} dosya Verilerin içinde bulunacağı dosya'nın ismi *(kimlik)*\n * @param {function} geriCagirma- *(hata, yükler)* İşlemler yapıldıktan sonra verilen yanıt\n */\nexport function sil(dizin, dosya, geriCagirma) {\n  // Dosya baplantısını kaldırma\n  unlink(`${anaDizin}${dizin}/${dosya}.json`, hata => {\n    if (!hata) {\n      geriCagirma(false, { bilgi: \"Dosya silme işleminde hata yok :)\" });\n    } else {\n      geriCagirma(\"Dosyadan veri silinmesinde hata meydana geldi :(\");\n    }\n  });\n}\n"]}